#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <conio.h>
#include<locale.h>
#include<iso646.h>
#include<math.h>
clrscr()
{
	system("@cls||clear");
}
void bSort(double* arr1, int size)
{
	printf("Подождите идет сортировка...\n");
	int i, j;
	double b;
	for (i = 0; i < size; i++)
	{
		for (j = 0; j < size - (i + 1); j++)
		{
			if (arr1[j] > arr1[j + 1])
			{
				b = arr1[j];
				arr1[j] = arr1[j + 1];
				arr1[j + 1] = b;
			}
		}
	}
}
void sortInsertion(double* arr2, int size)
{
	printf("Подождите идет сортировка...\n");
	double b;
	int i, k;
	for (i = 1; i < size; i++)
	{
		for (k = i; k > 0 and arr2[k - 1] > arr2[k]; k--)
		{
			b = arr2[k];
			arr2[k] = arr2[k - 1];
			arr2[k - 1] = b;
		}
	}

}
void fastSort(double* arr3, int start, int end)
{
	int left = start;
	int right = end;
	double middle = arr3[(left + right) / 2];
	while (left <= right)
	{
		while (arr3[left] < middle)
		{
			left++;
		}
		while (arr3[right] > middle)
		{
			right--;
		}
		if (left <= right)
		{
			double buff = arr3[left];
			arr3[left] = arr3[right];
			arr3[right] = buff;
			left++;
			right--;
		}
	}
	if (start < right)
		fastSort(arr3, start, right);
	if (end > left)
		fastSort(arr3, left, end);

}
int the_first_norm_of_vector(int size_file, double b[])
{
	int     answer;
	double  vichisl = 0;

	for (int k = 0; k < size_file; k++)
	{
		vichisl += fabs(pow(b[k], 1));
	}
	printf_s("\nНорма вектора = %lf\n\n", pow(vichisl, (1 / 1)));

	printf("\nХотите подсчитать другую норму фектора?\n");
	printf_s("1. Да\n2. Нет\n");
	scanf_s("%d", &answer);
	if (answer == 1)
		return 0;
	else
		return 1;

	return 0;
}

int the_second_norm_of_vector(int size_file, double b[])
{
	int     answer;
	double  vichisl = 0;

	vichisl = fabs(b[size_file - 1]);
	printf("\nНорма вектора = %lf\n\n", vichisl);

	printf("\nХотите подсчитать другую норму фектора?\n");
	printf_s("1. Да\n2. Нет\n");
	scanf_s("%d", &answer);
	if (answer == 1)
		return 0;
	else
		return 1;

	return 0;
}

int the_Helder_norm_of_vector(int size_file, double b[])
{
	int answer;
	double sum = 0;

	for (int index = 0; index < size_file; index++)
	{
		sum += pow(abs(b[index]), size_file);
	}

	printf("\nГельдерова норма вектора равна: %lf\n", pow(sum, 1 / size_file));

	printf("\nХотите подсчитать другую норму фектора?\n");
	printf_s("1. Да\n2. Нет\n");
	scanf_s("%d", &answer);
	if (answer == 1)
		return 0;
	else
		return 1;

	return 0;
}

int infinite_norm_of_vector(int size_file, double b[])
{
	double max = 0;
	int answer;

	for (int index = 0; index < size_file; index++)
	{
		if (b[index] > max)
		{
			max = abs(b[index]);
		}
	}

	printf("\nБесконечная норма вектора равна: %lf\n", max);

	printf("\nХотите подсчитать другую норму фектора?\n");
	printf_s("1. Да\n2. Нет\n");
	scanf_s("%d", &answer);
	if (answer == 1)
		return 0;
	else
		return 1;

	return 0;
}

int normalization_of_the_array_vector(int size_file, double b[])
{
	int answer;
	double sum = 0, sum_sqrt;

	for (int index = 0; index < size_file; index++)
	{
		sum += pow(abs(b[index]), 2);
	}

	sum_sqrt = sqrt(sum);

	printf("\nНормировка вектора:  {");

	for (int index = 0; index < size_file; index++)
	{
		printf("%lf, ", b[index] / sum_sqrt);
	}
	printf("}\n");

	printf("\nХотите подсчитать другую норму фектора?\n");
	printf_s("1. Да\n2. Нет\n");
	scanf_s("%d", &answer);
	if (answer == 1)
		return 0;
	else
		return 1;

	return 0;
}
const double RAND_MAX_F = RAND_MAX;
int stringCount(FILE* strC)
{
	int result = 0;
	while (!ferror(strC) and !feof(strC))
	{
		if (fgetc(strC) == '\n')
			result++;
	}
	rewind(strC);
	return result;
}
int main()
{
	int size, flag = 0, flag2 = 0, i, x_1, user_run;
	double startTime, endTime, time_on_prog;
	double* MAS, * MAS1;
	FILE* file = fopen("C://Users//anton//source//repos//Project5//Project5//text.txt", "r");
	setlocale(LC_ALL, "Russian");
	srand(time(NULL));
	printf_s("Чтение из файла...\n\n");
	size = stringCount(file);
	MAS = (double*)malloc(size * sizeof(double));
	MAS1 = (double*)malloc(size * sizeof(double));
	if (MAS == 0 or MAS1 == 0)
		return 1;
	for (int i = 0; i < size; i++)
		fscanf_s(file, "%lf", &MAS[i]);
	memcpy(MAS1, MAS, sizeof(double) * size);
	do
	{
		printf("Выберете действие:\n1. Сортировка\n2. Распечатать числа\n3. Сброс\n4. Работа с массивом\n5. Выйти\n\nВЫБОР: ");
		scanf_s("%d", &flag);
		if (flag < 1 or flag > 5)
		{
			printf("Ошибка. Введите значение снова\n\nВЫБОР:");
		}
		if (flag == 1)
		{
			clrscr();
			printf("Выберите способ сортировки:\n1. Пузырьком\n2. Вставками\n3. Быстрая\n4. Вернуться в меню\n\nВыбор:");
			do
			{
				scanf_s("%d", &flag2);
				if (flag2 < 1 or flag2 > 4)
				{
					printf("Неверный ввод. Введите снова\n Выбор:");
				}
			} while (flag2 < 1 or flag2 > 4);


			if (flag2 == 1)
			{
				clrscr();
				startTime = clock();
				bSort(MAS1, size);
				endTime = clock();

				time_on_prog = (double)(endTime - startTime) / 1000;

				printf("Соритровка завершена\n");
				printf_s("Время выполнения %f\n\n", time_on_prog);
			}
			else if (flag2 == 2)
			{
				clrscr();
				startTime = clock();
				sortInsertion(MAS1, size);
				endTime = clock();

				time_on_prog = (double)(endTime - startTime) / 1000;

				printf("Сортировка завершена\n");
				printf_s("Время выполнения %f\n\n", time_on_prog);
			}

			else if (flag2 == 3)
			{
				clrscr();
				startTime = clock();
				fastSort(MAS1, 0, size - 1);
				endTime = clock();

				time_on_prog = (double)(endTime - startTime) / 1000;

				printf("Сортировка завершена\n");
				printf_s("Время выполнения %f\n\n", time_on_prog);
			}
			else
			{
				clrscr();
			}
		}
		if (flag == 2)
		{
			for (i = 0; i < size; i++)
				printf_s("MAS[%d] = %lf\n", i, MAS1[i]);
		}
		if (flag == 3)
		{
			clrscr();
			memcpy(MAS1, MAS, sizeof(double) * size);
			printf_s("Сортировка успешно сброшена.\n\n");

		}
		if (flag == 4)
		{
			do
			{
			system("cls");
			printf("1. Вычислить первую норму вектора\n2. Вычислить вторую норму вектора\n3. Вычислить Гельдерову норму вектора\n");
			printf("4. Вычислить бесконечную норму вектора\n5. Нормировка вектора.\n");
			scanf_s("%d", &x_1);
			if (x_1 < 1 or x_1>5)
			{
				printf("Вы ввели не правильные данные. Повторите\n");
			} 
			
				if (x_1 == 1)
				{
					user_run = the_first_norm_of_vector(size, MAS1);

				}
				if (x_1 == 2)
				{
					user_run = the_second_norm_of_vector(size, MAS1);
				}
				if (x_1 == 3)
					user_run = the_Helder_norm_of_vector(size, MAS1);
				if (x_1 == 4)
					user_run = infinite_norm_of_vector(size, MAS1);
				if (x_1 == 5)
					user_run = normalization_of_the_array_vector(size, MAS1);
			} while (user_run != 1);
		}
		if (flag == 5)
			{
				printf("Программа завершена\n");
				return 0;
			}
	} while (flag == 1 or flag == 2 or flag == 3 or flag == 4 or flag == 5);
	fclose(file);
	free(MAS);
	free(MAS1);
	 
}
